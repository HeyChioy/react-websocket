{"version":3,"sources":["../src/WebSocketRC.js"],"names":["WebSocketRC","props","handleMessage","data","json","JSON","parse","action","actionKey","handler","actionMap","onMessage","e","result","rawText","closeOldSocket","ws","readyState","CONNECTING","shouldClose","close","url","protocol","retryTimes","state","initWebSocket","WebSocket","onclose","console","log","maxRetryTimes","onClose","onRetry","setTimeout","retryDelay","onerror","onError","onmessage","decorator","send","sendData","constructor","String","stringify","onopen","onCreate","display","Component","propTypes","string","isRequired","func","object","autoReconnect","bool","number"],"mappings":"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","file":"WebSocketRC.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass WebSocketRC extends React.Component {\n    constructor(props) {\n        super(props);\n        const { url, protocol } = props; // Config\n        const { actionKey = 'SYS_ACTION', actionMap = {} } = props;\n        this.shouldClose = false;\n        this.retryTimes = 1;\n        this.state = {\n            // Config\n            url,\n            protocol,\n            actionKey,\n            actionMap,\n        };\n    }\n    handleMessage = ({ data }) => {\n        try {\n            const json = JSON.parse(data);\n            const action = json[this.props.actionKey];\n            const handler = this.props.actionMap[action];\n            if (action && handler) {\n                handler(json);\n            } else {\n                this.props.onMessage(json);\n            }\n        } catch (e) {\n            const result = { rawText: data};\n            this.props.onMessage(result);\n        }\n    };\n    componentWillMount() {\n        this.initWebSocket();\n    }\n    componentWillUnmount() {\n        this.shouldClose = true;\n        this.ws.close();\n    }\n    closeOldSocket = () => {\n      if (this.ws && this.ws.readyState === ws.CONNECTING) {\n          this.shouldClose = true;\n          this.ws.close();\n      }\n    };\n    initWebSocket() {\n        this.closeOldSocket();\n        const ws = new WebSocket(this.props.url, this.props.protocol);\n        ws.onclose = () => {\n            console.log(this.retryTimes);\n            if (this.shouldClose || this.retryTimes++ > ( this.props.maxRetryTimes || 3)) {\n                this.props.onClose();\n                return;\n            }\n            this.props.onRetry && this.props.onRetry();\n            setTimeout(() => {\n                this.initWebSocket();\n            }, this.props.retryDelay || 3000);\n        };\n        ws.onerror = (e) => {\n            this.props.onError(e);\n            ws.close();\n        };\n        ws.onmessage = this.handleMessage;\n        const decorator = {\n            send(data) {\n                const sendData = data.constructor === String ?\n                    data: JSON.stringify(data);\n                ws.send(sendData);\n            }\n        };\n        ws.onopen = () => {\n            this.retryTimes = 1;\n            this.ws = ws;\n            this.props.onCreate(decorator, ws);\n        }\n    }\n    render() {\n        return (\n            <span style={{ display: 'none' }}>WebSocket React Component by KyuuSeiryuu.</span>\n        );\n    }\n}\n\nWebSocketRC.propTypes = {\n    url: PropTypes.string.isRequired,\n    protocol: PropTypes.string,\n    onMessage: PropTypes.func.isRequired,\n    onCreate: PropTypes.func,\n    onClose: PropTypes.func,\n    onError: PropTypes.func,\n    onRetry: PropTypes.func,\n    actionMap: PropTypes.object,\n    actionKey: PropTypes.string,\n    autoReconnect: PropTypes.bool,\n    maxRetryTimes: PropTypes.number,\n    retryDelay: PropTypes.number,\n};\n\nexport default WebSocketRC;\n"]}