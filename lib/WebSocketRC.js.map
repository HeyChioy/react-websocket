{"version":3,"sources":["../src/WebSocketRC.js"],"names":["tryToParseJson","str","JSON","parse","e","WebSocketRC","props","handleMessage","data","json","action","actionKey","handler","actionMap","onJson","onMessage","closeOldSocket","ws","readyState","WebSocket","CONNECTING","shouldClose","close","url","protocol","retryTimes","state","initWebSocket","onclose","autoReconnect","maxRetryTimes","onClose","onRetry","setTimeout","retryDelay","onerror","onError","onmessage","decorator","send","sendData","constructor","String","stringify","onopen","onCreate","display","React","Component","defaultProps"],"mappings":"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","file":"WebSocketRC.js","sourcesContent":["import React from 'react';\n\n\nconst tryToParseJson = (str) => {\n  try {\n    return JSON.parse(str)\n  } catch (e) {}\n};\n\nclass WebSocketRC extends React.Component {\n  constructor(props) {\n    super(props);\n    const { url, protocol } = props;\n    const { actionKey = 'SYS_ACTION', actionMap = {} } = props;\n    this.shouldClose = false;\n    this.retryTimes = 1;\n    this.state = {\n      url,\n      protocol,\n      actionKey,\n      actionMap,\n    };\n  }\n  handleMessage = ({ data }) => {\n    const json = tryToParseJson(data);\n    if (json) {\n      const action = json[this.props.actionKey];\n      const handler = this.props.actionMap[action];\n      if (action && handler) {\n        handler(json);\n      } else {\n        this.props.onJson(json);\n      }\n    } else {\n      this.props.onMessage(data);\n    }\n  };\n  componentWillMount() {\n    this.initWebSocket();\n  }\n  componentWillUnmount() {\n    this.shouldClose = true;\n    this.ws && this.ws.close();\n  }\n  closeOldSocket = () => {\n    if (this.ws && (this.ws.readyState === WebSocket.CONNECTING)) {\n      this.shouldClose = true;\n      this.ws && this.ws.close();\n    }\n  };\n  initWebSocket() {\n    this.closeOldSocket();\n    const ws = new WebSocket(this.props.url, this.props.protocol);\n    ws.onclose = () => {\n      if (!this.props.autoReconnect || // needn't reconnect\n        this.shouldClose || // really want to close\n        (this.props.maxRetryTimes && this.retryTimes + 1 > this.props.maxRetryTimes)\n      ) {\n        this.props.onClose();\n        return;\n      }\n      this.props.onRetry(this.retryTimes);\n      this.retryTimes += 1;\n      setTimeout(() => {\n        this.initWebSocket();\n      }, this.props.retryDelay);\n    };\n    ws.onerror = (e) => {\n      this.props.onError(e);\n      (ws && ws.close());\n    };\n    ws.onmessage = this.handleMessage;\n    const decorator = {\n      send(data) {\n        const sendData = data.constructor === String ?\n          data: JSON.stringify(data);\n        ws.send(sendData);\n      }\n    };\n    ws.onopen = () => {\n      this.retryTimes = 1;\n      this.ws = ws;\n      this.props.onCreate(decorator, ws);\n    }\n  }\n  render() {\n    return (\n      <span style={{ display: 'none' }}>WebSocket React Component by KyuuSeiryuu.</span>\n    );\n  }\n}\n\nWebSocketRC.defaultProps = {\n  onMessage: () => {},\n  onCreate: () => {},\n  onClose: () => {},\n  onRetry: () => {},\n  onError: () => {},\n  onJson: () => {},\n  autoReconnect: false,\n  maxRetryTimes: 3,\n  retryDelay: 3000,\n  actionMap: {},\n};\n\nexport default WebSocketRC;\n"]}