{"version":3,"sources":["../src/WebSocketRC.js"],"names":["WebSocketRC","props","handleMessage","data","json","JSON","parse","action","actionKey","handler","actionMap","onMessage","e","result","rawText","closeOldSocket","ws","readyState","CONNECTING","shouldClose","close","url","protocol","retryTimes","state","initWebSocket","WebSocket","onclose","autoReconnect","maxRetryTimes","onClose","onRetry","setTimeout","retryDelay","onerror","onError","onmessage","decorator","send","sendData","constructor","String","stringify","onopen","onCreate","display","Component","propTypes","string","isRequired","func","object","bool","number","defaultProps"],"mappings":"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","file":"WebSocketRC.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\n\nclass WebSocketRC extends React.Component {\n  constructor(props) {\n    super(props);\n    const { url, protocol } = props; // Config\n    const { actionKey = 'SYS_ACTION', actionMap = {} } = props;\n    this.shouldClose = false;\n    this.retryTimes = 1;\n    this.state = {\n      // Config\n      url,\n      protocol,\n      actionKey,\n      actionMap,\n    };\n  }\n  handleMessage = ({ data }) => {\n    try {\n      const json = JSON.parse(data);\n      const action = json[this.props.actionKey];\n      const handler = this.props.actionMap[action];\n      if (action && handler) {\n        handler(json);\n      } else {\n        this.props.onMessage(json);\n      }\n    } catch (e) {\n      const result = { rawText: data};\n      this.props.onMessage(result);\n    }\n  };\n  componentWillMount() {\n    this.initWebSocket();\n  }\n  componentWillUnmount() {\n    this.shouldClose = true;\n    this.ws.close();\n  }\n  closeOldSocket = () => {\n    if (this.ws && this.ws.readyState === ws.CONNECTING) {\n      this.shouldClose = true;\n      this.ws.close();\n    }\n  };\n  initWebSocket() {\n    this.closeOldSocket();\n    const ws = new WebSocket(this.props.url, this.props.protocol);\n    ws.onclose = () => {\n      if (!this.props.autoReconnect || // needn't reconnect\n        this.shouldClose || // really want to close\n        this.retryTimes++ > ( this.props.maxRetryTimes)) {\n        this.props.onClose();\n        return;\n      }\n      this.props.onRetry();\n      setTimeout(() => {\n        this.initWebSocket();\n      }, this.props.retryDelay);\n    };\n    ws.onerror = (e) => {\n      this.props.onError(e);\n      ws.close();\n    };\n    ws.onmessage = this.handleMessage;\n    const decorator = {\n      send(data) {\n        const sendData = data.constructor === String ?\n          data: JSON.stringify(data);\n        ws.send(sendData);\n      }\n    };\n    ws.onopen = () => {\n      this.retryTimes = 1;\n      this.ws = ws;\n      this.props.onCreate(decorator, ws);\n    }\n  }\n  render() {\n    return (\n      <span style={{ display: 'none' }}>WebSocket React Component by KyuuSeiryuu.</span>\n    );\n  }\n}\n\nWebSocketRC.propTypes = {\n  url: PropTypes.string.isRequired,\n  protocol: PropTypes.string,\n  onMessage: PropTypes.func.isRequired,\n  onCreate: PropTypes.func,\n  onClose: PropTypes.func,\n  onError: PropTypes.func,\n  onRetry: PropTypes.func,\n  actionMap: PropTypes.object,\n  actionKey: PropTypes.string,\n  autoReconnect: PropTypes.bool,\n  maxRetryTimes: PropTypes.number,\n  retryDelay: PropTypes.number,\n};\n\nWebSocketRC.defaultProps = {\n  onCreate: () => {},\n  onClose: () => {},\n  onRetry: () => {},\n  onError: () => {},\n  autoReconnect: false,\n  maxRetryTimes: 3,\n  retryDelay: 3000\n}\n\nexport default WebSocketRC;\n"]}